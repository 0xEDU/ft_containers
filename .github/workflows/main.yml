name: cpp-checks

on:
  push:
    branches: [ "*" ]
    paths:
      - "includes/*"
      - "tests/*"
      - "Makefile"

jobs:
  cpp-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cpp-linter/cpp-linter-action@main
        id: linter
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: './.clang-format'
          tidy-checks: '-*'
          version: '12'
          files-changed-only: false
          thread-comments: false
          step-summary: true

      - name: Check formatting
        if: steps.linter.outputs.checks-failed != 0
        run: |
          echo "some formatting checks failed. ${{ steps.linter.outputs.checks-failed }}" && exit 1
  build-tests:
    runs-on: ubuntu-latest
    needs: cpp-formatting # Optional: make this job depend on formatting
    steps:
      - uses: actions/checkout@v4
      - name: Make
        run: |
          make || exit 1
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries
          path: ./bin/
          retention-days: 1

  run-binaries:
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: ./downloaded-binaries

      - name: List Downloaded Files # for Debugging
        run: ls -R ./downloaded-binaries

      - name: Run Executables with Valgrind
        run: |
          echo "Running binaries from ./downloaded-binaries/ with Valgrind"
          VALGRIND_ERROR_CODE=125 # Custom exit code for Valgrind errors if program itself exits 0
          overall_exit_code=0 # Track if any valgrind check fails

          for exe_path in ./downloaded-binaries/*; do
            if [ -f "$exe_path" ] && [ -x "$exe_path" ]; then
              exe_name=$(basename "$exe_path")
              echo "----------------------------------------------------"
              echo "Running Valgrind on $exe_name"
              echo "----------------------------------------------------"
              # Run Valgrind. It will output to stderr.
              # --error-exitcode ensures Valgrind returns a specific code if it finds errors,
              # even if the program itself exits with 0.
              # If the program crashes (non-zero exit), Valgrind usually forwards that exit code.
              valgrind --leak-check=full \
                       --show-leak-kinds=all \
                       --track-origins=yes \
                       --error-exitcode=$VALGRIND_ERROR_CODE \
                       --log-file="valgrind-${exe_name}.log" \
                       "$exe_path"

              valgrind_exit_code=$?
              program_output_file="valgrind-${exe_name}.log"

              if [ $valgrind_exit_code -eq $VALGRIND_ERROR_CODE ]; then
                echo "Valgrind found memory errors in $exe_name. Exit code: $valgrind_exit_code"
                echo "Valgrind log for $exe_name:"
                cat "$program_output_file" # Print log to GitHub Actions console
                overall_exit_code=$valgrind_exit_code # Mark that a failure occurred
              elif [ $valgrind_exit_code -ne 0 ]; then
                # This means the program itself likely crashed or exited non-zero,
                # and Valgrind is reporting that program's exit code.
                echo "Error: $exe_name exited with code $valgrind_exit_code under Valgrind."
                echo "Valgrind log for $exe_name (may contain program crash info or Valgrind errors):"
                cat "$program_output_file" # Print log to GitHub Actions console
                overall_exit_code=$valgrind_exit_code # Mark that a failure occurred
              else
                echo "$exe_name ran successfully under Valgrind (no errors found by Valgrind, program exited 0)."
                # You might still want to see the log for review
                echo "Valgrind log for $exe_name (should be clean):"
                cat "$program_output_file"
              fi
              echo "----------------------------------------------------"
            else
              echo "Skipping $exe_path (not an executable file)"
            fi
          done

          if [ $overall_exit_code -ne 0 ]; then
            echo "One or more binaries failed Valgrind checks or execution."
            exit $overall_exit_code
          else
            echo "All binaries ran successfully under Valgrind."
          fi

      - name: Upload Valgrind Logs
        if: always() # Upload logs even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: valgrind-logs
          path: valgrind-*.log
          retention-days: 7
